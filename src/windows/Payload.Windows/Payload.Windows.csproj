<Project>
  <!-- Implicit SDK props import -->
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>net461</TargetFramework>
    <RuntimeIdentifier>win-x64</RuntimeIdentifier>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\shared\Git-Credential-Manager\Git-Credential-Manager.csproj" />
    <ProjectReference Include="..\GitHub.Authentication.Helper.Windows\GitHub.Authentication.Helper.Windows.csproj" />
    <ProjectReference Include="..\Microsoft.Authentication.Helper.Windows\Microsoft.Authentication.Helper.Windows.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="MicroBuild.Core" Version="0.2.0">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <FilesToSign Include="
      $(OutDir)git-credential-manager.exe;
      $(OutDir)GitHub.dll;
      $(OutDir)GitHub.UI.dll;
      $(OutDir)GitHub.Authentication.Helper.exe;
      $(OutDir)Microsoft.AzureRepos.dll;
      $(OutDir)Microsoft.Git.CredentialManager.dll;
      $(OutDir)Microsoft.Authentication.Helper.exe;">
      <Authenticode>Microsoft</Authenticode>
      <InProject>false</InProject>
    </FilesToSign>
  </ItemGroup>

  <!-- Implicit SDK targets import (so we can override the default targets below) -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!-- Check all the files to sign exist -->
  <Target Name="ValidateSigningDependencies"
          AfterTargets="PrepareForRun"
          Inputs="@(FilesToSign)"
          Outputs="$(OutDir)validatesign.timestamp">
    <Error Text="File to sign not found: %(FilesToSign.Identity)"
           Condition="!Exists('%(FilesToSign.Identity)')" />
    <WriteLinesToFile File="$(OutDir)validatesign.timestamp"
                      Lines="@(FilesToSign)"
                      Overwrite="true" />
  </Target>

  <!-- We don't want to produce a binary with this project -->
  <Target Name="CoreCompile" />
  
  <!-- We only want to copy the dependent projects' outputs; no binary is produced for this project -->
  <Target Name="CopyFilesToOutputDirectory"
          DependsOnTargets="
            ComputeIntermediateSatelliteAssemblies;
            _CopyFilesMarkedCopyLocal;
            _CopySourceItemsToOutputDirectory;
            _CopyAppConfigFile;
            _CopyManifestFiles;
            _CheckForCompileOutputs;
            _SGenCheckForOutputs" />

  <Target Name="CoreClean">
    <RemoveDir Directories="$(ProjectOutPath)" />
  </Target>

</Project>
